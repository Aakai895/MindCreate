import React, { createContext, useState, useContext } from 'react';

// Criação do contexto
const AppContext = createContext();

// Provider
export const AppProvider = ({ children }) => {
  const [usuario, setUsuario] = useState(null); // Estado global de exemplo
   async function registerUser(email, password, nome) {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password);
      const user = userCredential.user;
      console.log("Usuário criado com sucesso:", user.uid);
        const usuario = {
            uid: user.uid,
            nome: nome,
            email: email,
            criadoEm: new Date()
        }
        console.log(usuario)
      await setDoc(doc(db, "usuario", user.uid), {
        uid: user.uid,
        nome: nome,
        email: email,
        criadoEm: new Date()
      });
      setUsuario(usuario)
  
      console.log("Dados salvos no Firestore com sucesso!");
      return user;
    } catch (error) {
      console.error("Erro durante o registro ou ao salvar no Firestore:", error);
      throw error; // repropaga para a tela mostrar o erro
    }
  }
  
  async function loginUser(email, password) {
    try {
      const userCredential = await signInWithEmailAndPassword(auth, email, password);
      console.log("Login realizado com sucesso:", userCredential.user.uid);
      return userCredential.user;
    } catch (error) {
      console.error("Erro no login:", error);
      throw error; // repropaga para mostrar o erro na tela
    }
  }
  
   async function logoutUser() {
    try {
      await signOut(auth);
      console.log("Logout realizado com sucesso.");
    } catch (error) {
      console.error("Erro ao fazer logout:", error);
      throw error;
    }
  }
  
  return (
    <AppContext.Provider value={{ usuario, logoutUser,loginUser, registerUser}}>
      {children}
    </AppContext.Provider>
  );
};

// Hook personalizado para acessar o contexto
export const useApp = () => useContext(AppContext);

